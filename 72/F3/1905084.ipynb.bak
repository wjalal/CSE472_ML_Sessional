{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing the Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchvision import datasets, transforms\n",
    "import numpy as np\n",
    "np.random.seed(44)  \n",
    "\n",
    "#\n",
    "transform = transforms.ToTensor()\n",
    "#\n",
    "train_dataset = datasets.FashionMNIST (root='data', train=True, transform=transform, download=False)\n",
    "#\n",
    "test_dataset = datasets.FashionMNIST (root='data', train=False, transform=transform, download=False)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Checking properties of the datset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 60000\n",
      "Test set size: 10000\n",
      "Image size: torch.Size([1, 28, 28])\n",
      "Number of classes: 10\n",
      "Class labels: ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n"
     ]
    }
   ],
   "source": [
    "print(\"Training set size:\", len(train_dataset))\n",
    "print(\"Test set size:\", len(test_dataset))\n",
    "print(\"Image size:\", train_dataset[0][0].shape) \n",
    "print(\"Number of classes:\", len(train_dataset.classes))\n",
    "print(\"Class labels:\", train_dataset.classes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Taking a look at the images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x100 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "num_samples = 20\n",
    "\n",
    "samples = [test_dataset[i][0].numpy().squeeze() for i in range(num_samples)]\n",
    "labels = [test_dataset[i][1] for i in range(num_samples)]\n",
    "\n",
    "plt.figure(figsize=(15, 1))\n",
    "for i in range(num_samples):\n",
    "    plt.subplot(1, num_samples, i + 1)\n",
    "    plt.imshow(samples[i], cmap=\"gray\")\n",
    "    plt.title(f\"{train_dataset.classes[labels[i]]}\") \n",
    "    plt.axis(\"off\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Processing the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader, random_split\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=False)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining a base class for Neural layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NeuralLayer:\n",
    "    def __init__(self):\n",
    "        self.training = True\n",
    "    \n",
    "    def train(self):\n",
    "        self.training = True\n",
    "\n",
    "    def eval(self):\n",
    "        self.training = False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementation of dense layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normal_xavier_init (nY, nX):\n",
    "    std = (2 / (nX+nY))**0.5\n",
    "    W = np.random.randn(nY, nX) * std\n",
    "    return W\n",
    "\n",
    "class DenseLayer (NeuralLayer):\n",
    "    pass\n",
    "    def __init__(self, nX, nY, Adam=True, beta1=0.9, beta2=0.999, epsilon=1e-6):\n",
    "        super().__init__()\n",
    "        self.W = normal_xavier_init (nY, nX)\n",
    "        self.B = np.zeros(nY)\n",
    "\n",
    "        self.Adam = Adam\n",
    "        if self.Adam:\n",
    "            self.beta1 = beta1\n",
    "            self.beta2 = beta2\n",
    "            self.epsilon = epsilon\n",
    "            self.t = 0\n",
    "\n",
    "            self.m_w = np.ones_like(self.W) * 0.4\n",
    "            self.m_b = np.zeros_like(self.B)\n",
    "\n",
    "            self.v_w = np.ones_like(self.W) * 0.16\n",
    "            self.v_b = np.zeros_like(self.B)\n",
    "\n",
    "    def forward (self, X_in):\n",
    "        self.X = X_in\n",
    "        Y = np.matmul (self.X, np.transpose(self.W)) + self.B\n",
    "        if np.isnan(Y).any(): \n",
    "            print(\"NaN detected in DenseLayer forward pass\")\n",
    "        return Y\n",
    "    \n",
    "    def backward (self, G_y, alpha):\n",
    "        G_x = np.matmul (G_y, self.W)\n",
    "        G_w = np.matmul (np.transpose(G_y), self.X)\n",
    "        G_b = np.sum (G_y, axis=0)\n",
    "\n",
    "        if self.Adam:   \n",
    "            self.t = self.t + 1\n",
    "            self.m_w = self.beta1 * self.m_w + (1 - self.beta1) * G_w\n",
    "            self.m_b = self.beta1 * self.m_b + (1 - self.beta1) * G_b\n",
    "            self.v_w = self.beta2 * self.v_w + (1 - self.beta2) * G_w**2\n",
    "            self.v_b = self.beta2 * self.v_b + (1 - self.beta2) * G_b**2\n",
    "\n",
    "            m_hat_w = self.m_w / (1 - np.transpose(self.beta1))\n",
    "            m_hat_b = self.m_b / (1 - np.transpose(self.beta1))\n",
    "            v_hat_w = self.v_w / (1 - np.transpose(self.beta2))\n",
    "            v_hat_b = self.v_b / (1 - np.transpose(self.beta2))\n",
    "\n",
    "            self.W = self.W - alpha * G_w\n",
    "            self.B = self.B - alpha * G_b\n",
    "\n",
    "        else:\n",
    "            self.W = self.W - alpha * m_hat_w / (np.sqrt(v_hat_w) + self.epsilon)\n",
    "            self.B = self.B - alpha * m_hat_b / (np.sqrt(v_hat_b) + self.epsilon)\n",
    "\n",
    "        if np.isnan(self.W).any() or np.isnan(self.B).any(): \n",
    "            print(\"NaN detected in DenseLayer weights/biases after update\")\n",
    "        \n",
    "        return G_x\n",
    "   \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementation of ReLU Activation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ReLU (NeuralLayer):\n",
    "    pass\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "\n",
    "    def forward (self, X_in):\n",
    "        self.X = X_in\n",
    "        return np.maximum (self.X, 0)\n",
    "    \n",
    "    def backward (self, G_y, alpha):\n",
    "        G_x = G_y * (self.X >= 0)\n",
    "        return G_x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementation of Softmax loss function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Softmax (NeuralLayer):\n",
    "    pass\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "\n",
    "    def forward (self, X_in):\n",
    "        self.X = X_in\n",
    "        shiftX = np.max(self.X, axis=1, keepdims=True)\n",
    "        numerators = np.exp(self.X- shiftX)\n",
    "        denominator = np.sum(numerators, axis=1, keepdims=True)\n",
    "        self.Y = numerators / denominator \n",
    "        return self.Y\n",
    "\n",
    "    def backward (self, Y, alpha):\n",
    "        G_x = Y\n",
    "        return G_x\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementation of Dropout Layer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Dropout (NeuralLayer):\n",
    "    pass\n",
    "    def __init__ (self, probability=0.35):\n",
    "        super().__init__()\n",
    "        self.probability = probability\n",
    "    def forward (self, X):\n",
    "        if self.training:\n",
    "            prob_arr = np.random.rand(X.shape[0], X.shape[1])\n",
    "            self.mask = (prob_arr >= self.probability)\n",
    "            X_sel_scaled = X * self.mask / (1 - self.probability)\n",
    "            return X_sel_scaled\n",
    "        return X \n",
    "    \n",
    "    def backward (self, G_y, alpha):\n",
    "        G_x = G_y * self.mask / (1 - self.probability)\n",
    "        return G_x\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementation of Batch Normalisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BatchNorm (NeuralLayer):\n",
    "    pass\n",
    "    def __init__ (self, N, epsilon=1e-5):\n",
    "        super().__init__()\n",
    "        self.N = N\n",
    "        self.gamma = np.ones(N)*0.5\n",
    "        self.beta = np.zeros(N)\n",
    "        self.epsilon = epsilon\n",
    "\n",
    "    def forward (self, X_in):\n",
    "        self.X = X_in\n",
    "        self.mu = np.mean(self.X, axis=0)\n",
    "        self.var = np.var(self.X, axis=0)\n",
    "        self.Xhat = (self.X - self.mu) * (self.var + self.epsilon)**(-0.5)\n",
    "        self.Y = self.gamma * self.Xhat + self.beta\n",
    "        return self.Y\n",
    "    \n",
    "    def backward (self, G_y, alpha):\n",
    "        G_gamma = np.sum (G_y * self.Xhat, axis=0)\n",
    "        G_beta = np.sum (G_y, axis=0)\n",
    "    \n",
    "        G_Xhat = G_y * self.gamma\n",
    "        G_x = (self.N * G_Xhat - np.sum(G_Xhat, axis=0) - self.Xhat * np.sum(G_Xhat * self.Xhat, axis=0)) / (self.N * (self.var + self.epsilon)**0.5)\n",
    "        \n",
    "        self.gamma = self.gamma - alpha * G_gamma\n",
    "        self.beta = self.beta - alpha * G_beta\n",
    "\n",
    "        return G_x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sequential layer stacking mechanism"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sequential (NeuralLayer):\n",
    "    pass\n",
    "    def __init__ (self, *layers):\n",
    "        super().__init__()\n",
    "        self.layers = layers\n",
    "\n",
    "    def train (self):\n",
    "        for l in self.layers:\n",
    "            l.train()\n",
    "\n",
    "    def eval (self):\n",
    "        for l in self.layers:\n",
    "            l.eval()\n",
    "\n",
    "    def forward (self, X):\n",
    "        for layer in self.layers:\n",
    "            X = layer.forward(X)\n",
    "        return X\n",
    "    \n",
    "    def backward (self, G, alpha):\n",
    "        for layer in reversed(self.layers):\n",
    "            G = layer.backward (G, alpha)\n",
    "        return G\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "FNN Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FNN:\n",
    "    def __init__(self):\n",
    "        self.model = Sequential(\n",
    "            DenseLayer(784, 128),\n",
    "            BatchNorm(128),\n",
    "            ReLU(),\n",
    "            Dropout(0.1),\n",
    "            DenseLayer(128, 64),\n",
    "            BatchNorm(64),\n",
    "            ReLU(),\n",
    "            Dropout(0.1),\n",
    "            DenseLayer(64, 10),\n",
    "            Softmax()\n",
    "        )\n",
    "\n",
    "    def train(self):\n",
    "        self.model.train()\n",
    "\n",
    "    def eval(self):\n",
    "        self.model.eval()\n",
    "\n",
    "    def forward(self, X):\n",
    "        return self.model.forward(X)\n",
    "\n",
    "    def backward(self, grad_output, learning_rate):\n",
    "        return self.model.backward(grad_output, learning_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "\n",
    "loss_fn = lambda pred, true: -np.mean(np.sum(true * np.log(pred), axis=1))  # Cross-entropy loss\n",
    "\n",
    "\n",
    "def eval_fnn (model, dataset_loader):\n",
    "    model.eval()\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "    loss = 0\n",
    "    for X_batch, y_batch in dataset_loader:\n",
    "        X_batch = X_batch.view(X_batch.size(0), -1).numpy()  \n",
    "        y_batch_one_hot = np.eye(10)[y_batch.numpy()]\n",
    "        preds = model.forward(X_batch)\n",
    "        loss += loss_fn(preds, y_batch_one_hot)\n",
    "        predictions = np.argmax(preds, axis=1)\n",
    "        # Append current predictions and labels to the lists\n",
    "        all_preds.append(predictions)\n",
    "        all_labels.append(y_batch.numpy())\n",
    "\n",
    "    all_preds = np.concatenate(all_preds)\n",
    "    all_labels = np.concatenate(all_labels)\n",
    "    print (all_labels, all_preds)\n",
    "    # Calculate accuracy and F1-score\n",
    "    accuracy = accuracy_score(all_labels, all_preds)\n",
    "    f1 = f1_score(all_labels, all_preds, average=\"macro\")  \n",
    "    loss = loss / len(dataset_loader)\n",
    "    return loss, accuracy, f1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9 0 0 ... 3 0 5] [9 0 0 ... 3 0 5]\n",
      "[9 2 1 ... 8 1 5] [9 2 1 ... 6 1 5]\n",
      "Epoch 1/10:\n",
      "Training loss: 0.5365, Training accuracy: 0.8583, Training macro-f1: 0.8549\n",
      "Validation loss: 0.4381, Validation accuracy: 0.8404, Validation macro-f1: 0.8364\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (64,64) (32,64) ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[217], line 20\u001b[0m\n\u001b[1;32m     17\u001b[0m     epoch_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m loss\n\u001b[1;32m     19\u001b[0m     grad_output \u001b[38;5;241m=\u001b[39m preds \u001b[38;5;241m-\u001b[39m y_batch_one_hot  \n\u001b[0;32m---> 20\u001b[0m     \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgrad_output\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlearning_rate\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     22\u001b[0m epoch_loss \u001b[38;5;241m=\u001b[39m epoch_loss \u001b[38;5;241m/\u001b[39m \u001b[38;5;28mlen\u001b[39m(train_loader)\n\u001b[1;32m     23\u001b[0m train_loss, train_acc, train_f1 \u001b[38;5;241m=\u001b[39m eval_fnn(model, train_loader)\n",
      "Cell \u001b[0;32mIn[184], line 26\u001b[0m, in \u001b[0;36mFNN.backward\u001b[0;34m(self, grad_output, learning_rate)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mbackward\u001b[39m(\u001b[38;5;28mself\u001b[39m, grad_output, learning_rate):\n\u001b[0;32m---> 26\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43mgrad_output\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlearning_rate\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn[183], line 22\u001b[0m, in \u001b[0;36mSequential.backward\u001b[0;34m(self, G, alpha)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mbackward\u001b[39m (\u001b[38;5;28mself\u001b[39m, G, alpha):\n\u001b[1;32m     21\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m layer \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mreversed\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlayers):\n\u001b[0;32m---> 22\u001b[0m         G \u001b[38;5;241m=\u001b[39m \u001b[43mlayer\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mG\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43malpha\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     23\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m G\n",
      "Cell \u001b[0;32mIn[181], line 15\u001b[0m, in \u001b[0;36mDropout.backward\u001b[0;34m(self, G_y, alpha)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mbackward\u001b[39m (\u001b[38;5;28mself\u001b[39m, G_y, alpha):\n\u001b[0;32m---> 15\u001b[0m     G_x \u001b[38;5;241m=\u001b[39m \u001b[43mG_y\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmask\u001b[49m \u001b[38;5;241m/\u001b[39m (\u001b[38;5;241m1\u001b[39m \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprobability)\n\u001b[1;32m     16\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m G_x\n",
      "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (64,64) (32,64) "
     ]
    }
   ],
   "source": [
    "\n",
    "# Hyperparameters\n",
    "learning_rate = 0.003\n",
    "epochs = 10\n",
    "\n",
    "model = FNN()\n",
    "\n",
    "model.train()\n",
    "for epoch in range(epochs):\n",
    "    epoch_loss = 0\n",
    "    for X_batch, y_batch in train_loader:\n",
    "        X_batch = X_batch.view(X_batch.size(0), -1).numpy() \n",
    "        y_batch_one_hot = np.eye(10)[y_batch.numpy()]\n",
    "\n",
    "        preds = model.forward(X_batch)\n",
    "        \n",
    "        loss = loss_fn(preds, y_batch_one_hot)\n",
    "        epoch_loss += loss\n",
    "        \n",
    "        grad_output = preds - y_batch_one_hot  \n",
    "        model.backward(grad_output, learning_rate)\n",
    "\n",
    "    epoch_loss = epoch_loss / len(train_loader)\n",
    "    train_loss, train_acc, train_f1 = eval_fnn(model, train_loader)\n",
    "    test_loss, test_acc, test_f1 = eval_fnn(model, test_loader)\n",
    "    print(f\"Epoch {epoch+1}/{epochs}:\")\n",
    "    print(f\"Training loss: {epoch_loss:.4f}, Training accuracy: {train_acc:.4f}, Training macro-f1: {train_f1:.4f}\")   \n",
    "    print(f\"Validation loss: {test_loss:.4f}, Validation accuracy: {test_acc:.4f}, Validation macro-f1: {test_f1:.4f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
